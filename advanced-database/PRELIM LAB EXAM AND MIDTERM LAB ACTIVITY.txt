Prelim Lab Exam and Midterm Lab Activity

CREATE TABLE customers(customer_id INT PRIMARY KEY,customer_name VARCHAR(100),city VARCHAR(50),country VARCHAR(50));

INSERT INTO customers(customer_id,customer_name,city,country) VALUES
	(1,'Alice Johnson','New York','USA'),
	(2,'Carlos Rivera','Madrid','Spain'),
	(3,'Emily Wang','Beijing','China'),
	(4,'John Smith','Chicago','USA'),
	(5,'Sopia Rossi','Rome','Italy');

CREATE TABLE orders(order_id INT PRIMARY KEY,customer_id INT,order_date DATE,total_amount DECIMAL(10,2));

INSERT INTO orders(order_id,customer_id,order_date,total_amount) VALUES
	(101,1,'2024-02-01',500.00),
	(102,2,'2024-02-03',250.00),
	(103,1,'2024-02-05',300.00),
	(104,3,'2024-02-07',700.00),
	(105,4,'2024-02-09',150.00),
	(106,5,'2024-02-10',400.00);

CREATE TABLE order_items(item_id INT PRIMARY KEY,order_id INT,product_name VARCHAR(100),quantity INT,unit_price DECIMAL(10,2));

INSERT INTO order_items(item_id,order_id,product_name,quantity,unit_price) VALUES
	(1,101,'Laptop',1,500.00),
	(2,102,'Tablet',2,125.00),
	(3,103,'Headphones',3,100.00),
	(4,104,'Smartphone',1,700.00),
	(5,105,'Mouse',5,30.00),
	(6,106,'Keyboard',2,200.00);

1. Find the names of customers who have NOT placed any orders.
2. Retrieve orders where the total amount is greater than the average total amount of all orders.
3. Find the most expensive order (order_id, total_amount).
4. Find customers who placed atleast two orders.
5. Find the name of the customers who placed the highest total order amount.
6. Find the order(s) with the lowest total amount.
7. Retrieve the number of orders placed per day, but only display the days where more than 1 order was placed.
8. Find all customers who have atleast 1 order of more than 400.
9. Find customers who placed an order with more than 2 items in any order.
10. Find customers who placed atleast 1 order but did not order a laptop.

1. SELECT customer_name FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM orders);

2. SELECT * FROM orders WHERE total_amount > (SELECT AVG(total_amount) FROM orders);

3. SELECT order_id, total_amount FROM orders ORDER BY total_amount DESC LIMIT 1;

4. SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(*) >= 2);

5. SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE total_amount = (SELECT MAX(total_amount) FROM orders));

6. SELECT * FROM orders ORDER BY total_amount ASC LIMIT 1;

7. SELECT order_date, COUNT(*) as order_count FROM orders GROUP BY order_date HAVING order_count > 1;

8. SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders WHERE total_amount >= 400);

9. SELECT * FROM customers WHERE customer_id IN (SELECT customer_id FROM orders GROUP BY customer_id HAVING COUNT(*) > 2);

10. SELECT * FROM customers WHERE customer_id NOT IN (
	SELECT customer_id FROM orders WHERE order_id NOT IN (
		SELECT order_id FROM order_items WHERE product_name != 'Laptop'	
	)
);