const express = require("express");
const cors = require("cors");
const parser = require("body-parser");
const app = express();

// Initializing our gemini api
const { GoogleGenerativeAI } = require("@google/generative-ai");
genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
const model = genAI.getGenerativeModel({
  // Using base gemini model
  // model: "gemini-1.5-flash",
  // Using our fine tuned model, which is tuned to give information about Universidad De Dagupan
  model: "tunedModels/udd-prompt--tuned-model-v01-yn2r9srvxrc5",
  // Remove system instruction when using fine tuned models
  // This is for adding context for the system before entering promopts
  // systemInstruction: "You are a comedian assistant. Your name is Mochi.",
});

// Enabling cors for all routes
app.use(cors());

// Used to parse the json from the body in the request
app.use(parser.json());

// Defining a route for our express app
// The route can be reached at the localhost:3000/ endpoint
app.get("/", (request, response) => {
  response.send("Hello, world!");
});

app.get("/test", (request, response) => {
  response.send("GET REQUEST");
});

// To access this endpoint, we must sent a POST request to our server
app.post("/chat", async (request, response) => {
  // Get the json response from the request body, this could be found in the
  // json file
  const body = request.body;

  // Single text only input, one prompt only
  const result = await model.generateContent(body.prompt);

  response.send(result.response.text());
});

app.post("/chat-long", async (request, response) => {
  // Get the json response from the request body, this could be found in the
  // json file
  const body = request.body;

  // For continuous conversation
  const result = await model.generateContent({
    contents: body.prompts,
    generationConfig: {
      temperature: 0.8,
    },
  });

  response.send(result.response.text());
});

// Starts the chat with predefined history
app.post("/chat-history", async (req, res) => {
  try {
    /** Read the request data. */
    const chatHistory = req.body.history || [];
    const msg = req.body.chat;

    // Ensure history format is correct
    const formattedHistory = chatHistory.map((entry) => ({
      role: entry.role,
      parts: entry.parts.map((part) =>
        typeof part === "string" ? { text: part } : part
      ),
    }));

    /** Initialize the chat with the given history. */
    const chat = model.startChat({
      history: formattedHistory,
    });

    // const chat = model.startChat({
    //   history: [
    //     {
    //       role: "user",
    //       parts: [{ text: "My name is Rein." }],
    //     },
    //     {
    //       role: "model",
    //       parts: [{ text: "Nice to meet you Rein, what do you want to know?" }],
    //     },
    //   ],
    // });

    /**
     * Send the message posted by the user to the Gemini model and read the
     * response generated by the model.
     */
    const result = await chat.sendMessage(msg);

    // const result = await chat.sendMessage("What is my name?");

    const response = await result.response;
    const text = response.text();

    /** Send the response returned by the model as the API's response. */
    res.send({ text: text });
  } catch (error) {
    console.error("Error processing chat: ", error);
    res.status(500).send({ error: "Internal server error" });
  }
});

app.post("/testchat", async (request, response) => {
  const chatSession = model.startChat({
    history: [
      {
        role: "user",
        parts: [{ text: "What is UDD?" }],
      },
      {
        role: "model",
        parts: [{ text: "UDD stands for Universidad De Dagupan." }],
      },
      {
        role: "user",
        parts: [{ text: "What is UDD Philolosophy?" }],
      },
      {
        role: "model",
        parts: [
          {
            text: '"The Universidad De Dagupan believes that all individuals are endowed with God-given gifts that could be utilized to create a humane and progressive society.',
          },
        ],
      },
    ],
  });

  const result = await chatSession.sendMessage("What is UDD?");

  // console.log(result.response.text());

  response.send(result.response.text());
});

// The app listens and runs on port in the env file or port 3000
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`App is running on port: ${PORT}`);
});
